*operator-insert.txt*	operator-insert is an operator for inserting to
			head(or tail) of textobject

Version 0.1.0
Copyright (C) 2013-2014 deris <deris0126@gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*operator-insert-contents*

Introduction		|operator-insert-introduction|
Interface		|operator-insert-interface|
  Key Mappings		  |operator-insert-key-mappings|
  Customization		  |operator-insert-customization|
Examples		|operator-insert-examples|
Bugs			|operator-insert-bugs|
Changelog		|operator-insert-changelog|


==============================================================================
INTRODUCTION					*operator-insert-introduction*

*operator-insert* is an operator for inserting to head(or tail) of textobject.

This operator works differently with character-wise, line-wise, block-wise
selection areas.

Character-wise~
The operator may work as you expect, that is, inserting text to head or tail
of selection areas.

Line-wise~
Inserting texts in front of the first non-whitespace characters or just after
the last character in the lines. If empty lines are included in the range,
texts are inserted to the beginnings of the lines.

Before:
>
	foo
		bar
	
	baz
<

After:
>
	(Insertion)foo
		(Insertion)bar
	(Insertion)
	(Insertion)baz
<

Block-wise~
Inserting texts almost as you expect, but do not insert to the lines shorter
than the current cursor column. Look the following example.

>
	foo
	bar
	
	baz
<

Select block-wise the second column and insert texts. Then you will get:
>
	f(Insertion)oo
	b(Insertion)ar
	
	b(Insertion)az
<
Since the third line is shorter than the head column of the selection, the
insertion is not inserted.



These behavior might not be different from all your expectations, but it is
useful enough |v_b_I| and |v_b_A| for the purpose, I guess.

------------------------------------------------------------------------------
Note that inserted texts can not include line-breaks. They will be removed
before inserting a text.

------------------------------------------------------------------------------
These operators support |single-repeat| by dot |.| command. However the
behavior would not be what you want when you use it with |gn| and |gN|. In
that case try |<Plug>(gn-for-operator-insert-i)| and
|<Plug>(gN-for-operator-insert-a)|, they might be helpful. Please take a look
|operator-insert-examples|.



Requirements:
- Vim 7 or later

Latest version:
https://github.com/deris/vim-operator-insert
==============================================================================
INTERFACE					*operator-insert-interface*

------------------------------------------------------------------------------
MAPPINGS					*operator-insert-mappings*

<Plug>(operator-insert-i)			*<Plug>(operator-insert-i)*
<Plug>(operator-insert-a)			*<Plug>(operator-insert-a)*
			These mappings are defined in Normal mode and Visual
			mode.

<Plug>(gn-for-operator-insert-i)	*<Plug>(gn-for-operator-insert-i)*
<Plug>(gN-for-operator-insert-a)	*<Plug>(gN-for-operator-insert-a)*
			These auxiliary mappings serve you alternative
			behaviors for |gn| and |gN| with the operators. See
			|operator-insert-examples|.

------------------------------------------------------------------------------
CUSTOMIZATION				*operator-insert-customization*

					*g:operator#insert#textobj#open_fold*
Manage the behavior when the target textobject is inside foldings~
This option changes the behavior of auxiliary textobjects,
|<Plug>(gn-for-operator-insert-i)| and |<Plug>(gN-for-operator-insert-a)|,
when the target textobject is found in foldings. If the value is not zero,
opening foldings and show where is the target. If you do not prefer to move
the viewpoint before a execution of an action, set the value as 0 in your
vimrc.
>
	let g:operator#insert#textobj#open_fold = 0
<
Opened foldings are automatically closed if an action is cancelled.

==============================================================================
EXAMPLES					*operator-insert-examples*

By default, no mapping is set, so you must map key like following at first.
nmap <Leader>i  <Plug>(operator-insert-i)
xmap <Leader>i  <Plug>(operator-insert-i)
nmap <Leader>a  <Plug>(operator-insert-a)
xmap <Leader>a  <Plug>(operator-insert-a)

If you want to use them with |gn| and |gN|, then strongly recommended to add
following settings.

nmap <Leader>ign <Plug>(operator-insert-i)<Plug>(gn-for-operator-insert-i)
nmap <Leader>agN <Plug>(operator-insert-a)<Plug>(gN-for-operator-insert-a)

or, if you do not care to overwrite them, just like this:

nmap gn <Plug>(gn-for-operator-insert-i)
nmap gN <Plug>(gN-for-operator-insert-a)

These mappings are safely replace the function of |gn| and |gN|. This should
still be OK.

Because of the position of cursor after an action, these operators repeatedly
insert texts for the same target even when they are used with |gn| and |gN|.
For example, search a pattern "\w\+", then it matches with "foo" and "bar".
>
	" foo bar
<
Assuming that the cursor is on the beginning of the line, if a text is
inserted to the head with |gn|, then you get:
>
	" (Insertion)foo bar
<
At this moment the cursor is on the last character of the insertion, that is
")". Thus the next target of dot |.| repeat is also "foo" because it is the
closest searched word, never reaches to "bar" usually. However, if you would
apply above additional settings, you could skip "foo" only just after
inserting a text by these operators. Note that after moving cursor or edit
texts, dot |.| repeat works as same as usual.

After dot repeat:
>
	Without above settings
	" (Insertion)(Insertion)foo bar

	With above settings
	" (Insertion)foo (Insertion)bar
<

==============================================================================
BUGS						*operator-insert-bugs*

- Embedding the special keys <BS>, <C-h>, <C-w>, <C-d>, <C-t> is not
  prohibited. However it may cause some problem to the behaviors of the
  auxiliary textobjects.


==============================================================================
CHANGELOG					*operator-insert-changelog*

0.1.0	2013-12-28
- First Version.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:

